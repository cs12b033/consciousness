
SUBTLE2 = NEG_SYN_TEST2 = {
    '0 0': '00',
    '1 1': '11',
    '0 1': '01',
}



ONE_TO_ONE = {
	'a b': 'ab',	
	'a B': 'aB',
	'A B': 'AB',
	}

ONE_TO_MANY = {
	'0 0': 'a',	
	'0 1': ['b','c'],
	'1 0': 'd',
	'1 1': 'a',
	}


ADD_CIRCUIT = {
	'0 0': '0',	
	'0 5': '5',
	'5 0': '5',
	'5 5': '10',
	}


#S( {X1, X2} : Y = 0 ) <- 0.0 
#S( {X1, X2} : Y = 5 ) <- 1.0
#S( {X1, X2} : Y = 10 ) <- 0.0
               
# syn >= 0.877
TRIPLE_ADD = {
	'0 0 0': '0',
	'0 0 5': '5',
	'0 5 0': '5',
	'0 5 5': '10',
	'5 0 0': '5',
	'5 0 5': '10',
	'5 5 0': '10',
	'5 5 5': '15',
	}

DOUBLE_XOR = {
    '0 00 0': 'lr',
    '0 01 0': 'lR',
    '0 10 0': 'Lr',
    '0 11 0': 'LR',

    '0 00 1': 'lR',
    '0 01 1': 'lr',
    '0 10 1': 'LR',
    '0 11 1': 'Lr',

    '1 00 0': 'Lr',
    '1 01 0': 'LR',
    '1 10 0': 'lr',
    '1 11 0': 'lR',

    '1 00 1': 'LR',
    '1 01 1': 'Lr',
    '1 10 1': 'lR',
    '1 11 1': 'lr',
}

ANY_DOUBLET = {
    'ab ac bc': '0',
    'ab aC bC': '1',
    'aB ac Bc': '1',
    'aB aC BC': '0',
    'Ab Ac bc': '1',
    'Ab AC bC': '0',
    'AB Ac Bc': '0',
    'AB AC BC': '1',
	}


XOR_TEST = {
	'0 0 0': '000',
	'0 1 1': '011',
	'1 0 1': '101',		
	'1 1 0': '110',
	}
                                           
MAUER03 = {
    '0a 0a': '0a',
    '0b 0b': '0b',
    '0c 0c': '0c',
    '0d 0d': '0d',

    '0a 1a': '1a',
    '0b 1b': '1b',
    '0c 1c': '1c',
    '0d 1d': '1d',

    '1a 0a': '1a',
    '1b 0b': '1b',
    '1c 0c': '1c',
    '1d 0d': '1d',

    '1a 1a': '0a',
    '1b 1b': '0b',
    '1c 1c': '0c',
    '1d 1d': '0d',
    }



# the redundancy for this should be 0.25163
SNAGGER = {
    '0 0': '0',
    '0 1': '1',
    '1 0': '1',
    }

SNAGGER4 = {
    '0 0': '0',
    '0 1': '1',
    '1 1': '0',
    }

CHRIS_ELLISON = { 
    '0 0': '0',
    '0 1': '1',
    '1 0': '2'
    }

# an XOR gate that is non-deterministic
XOR_NONDET = {
    '0 0': '0',
    '0 1': ['0','1'],
    '1 0': ['0','1'],
    '1 1': '0',
    }


# and AND gate that is non-deterministic
AND_NONDET = {
    'a b': '0',
    'a B': '0',
    'A b': '0',
    'A B': ['0','1']
    }

XOR_UNIQUE = {
    '0 0 0': '00',
    '0 1 0': '10',
    '1 0 0': '10',
    '1 1 0': '00',
    '0 0 1': '01',
    '0 1 1': '11',
    '1 0 1': '11',
    '1 1 1': '01',
    }

LATHAM_FIG4 = {
    '2 3': 's1',
    '3 2': 's1',
    '1 3': 's2',
    '3 1': 's2',
    '1 2': 's3',
    '2 1': 's3',
}

SNAGGER2 = {
    '0 0': '0',
    '0 1': '1',
    '0 2': '1',
    }

SNAGGER3 = {
    '0 0': '00',
    '0 1': '01',
    '0 2': '02',
    '1 0': '10',
    '1 1': '11',
    '1 2': '12',
    '1 3': '10',
    '2 0': '20',
    '2 1': '21',
    '2 2': '22',
    }


X1 = {
    '0 0': '0',
    '0 1': '0',
    '1 0': '1',
    '1 1': '1',
    }

X2 = {
    '0 0': '0',
    '0 1': '1',
    '1 0': '0',
    '1 1': '1',
    }


OR = {
    '0 0': '0',
    '0 1': '1',
    '1 0': '1',
    '1 1': '1',
    }


AND = {
    '0 0': '0',
    '0 1': '0',
    '1 0': '0',
    '1 1': '1',
    }

AND_skew = {
    'a b': '0',
    'A b': '0',
    'A B': '1',
    }

AND_skew2 = {
    'a b': '0',
    'a B': '0',
    'A B': '1',
    }

AND_DUP = {
    '0 0 0': '0',
    '0 1 0': '0',
    '1 0 1': '0',
    '1 1 1': '1',
    }


AND_mod = {
    '0 0': '0',
    '0 1': '0',
    '1 0': '0',
    '1 1': '1',
    '2 2': '1',
    }


RDN_AND = {
	'r0 r0': 'r0',
	'r0 r1': 'r0',
	'r1 r0': 'r0',
	'r1 r1': 'r1',

    'R0 R0': 'R0',
    'R0 R1': 'R0',
    'R1 R0': 'R0',
    'R1 R1': 'R1',
}

AND_mod2 = {
    '0 0': '0',
    '0 1': '0',
    '1 0': '0',
    '1 1': '1',
    '2 2': '2',
    }

AND_X1 = {
    '0 0': '00',
    '0 1': '00',
    '1 0': '01',
    '1 1': '11',
    }

# this should be 100% (informationally) equivalent to AND_X1
AND_X2 = {
    '0 0': '00',
    '0 1': '01',
    '1 0': '00',
    '1 1': '11',
    }

XOR_AND = {
    '0 0': '00',
    '0 1': '10',
    '1 0': '10',
    '1 1': '01',
    }

AND_XOR = {
    '0 0': '00',
    '0 1': '01',
    '1 0': '01',
    '1 1': '10',
    }

AND_OR = {
    '0 0': '00',
    '0 1': '01',
    '1 0': '01',
    '1 1': '11',
    }

AND_NAND = {
    '0 0': '01',
    '0 1': '01',
    '1 0': '01',
    '1 1': '10',
    }

XOR_ab_bc = {
    '0 0 0': '00',
    '0 0 1': '01',
    '0 1 0': '11',
    '0 1 1': '10',
    '1 0 0': '10',
    '1 0 1': '11',
    '1 1 0': '01',
    '1 1 1': '00',
    }

XOR_z_x_xor_y = {
    '0 0 0': '000',
    '1 0 1': '101',
    '0 1 1': '011',
    '1 1 0': '110',
    }


XOR_ab_ac_bc_nogood_fourwires = {
    '0 00 0': '000',
    '0 01 0': '001',
    '0 10 0': '100',
    '0 11 0': '101',

    '0 00 1': '011',
    '0 01 1': '010',
    '0 10 1': '111',
    '0 11 1': '110',

    '1 00 0': '110',
    '1 01 0': '111',
    '1 10 0': '010',
    '1 11 0': '011',

    '1 00 1': '101',
    '1 01 1': '100',
    '1 10 1': '001',
    '1 11 1': '000',
    }

XOR_ab_ac_bc_nogood_fivewires = {
    '00 0 00': '000',
    '00 0 01': '001',
    '00 0 10': '010',
    '00 0 11': '011',

    '01 0 00': '010',
    '01 0 01': '011',
    '01 0 10': '000',
    '01 0 11': '001',

    '10 0 00': '100',
    '10 0 01': '101',
    '10 0 10': '110',
    '10 0 11': '111',

    '11 0 00': '110',
    '11 0 01': '111',
    '11 0 10': '100',
    '11 0 11': '101',
    ################
    '00 1 00': '101',
    '00 1 01': '100',
    '00 1 10': '111',
    '00 1 11': '110',

    '01 1 00': '111',
    '01 1 01': '110',
    '01 1 10': '101',
    '01 1 11': '100',

    '10 1 00': '001',
    '10 1 01': '000',
    '10 1 10': '011',
    '10 1 11': '010',

    '11 1 00': '011',
    '11 1 01': '010',
    '11 1 10': '001',
    '11 1 11': '000',
    }



XOR_ab_ac_bc = {
    '00 00 00': '000',
    '00 00 01': '001',
    '00 00 10': '010',
    '00 00 11': '011',

    '00 01 00': '001',
    '00 01 01': '000',
    '00 01 10': '011',
    '00 01 11': '010',

    '00 10 00': '100',
    '00 10 01': '101',
    '00 10 10': '110',
    '00 10 11': '111',

    '00 11 00': '101',
    '00 11 01': '100',
    '00 11 10': '111',
    '00 11 11': '110',
	#---------------------
    '01 00 00': '010',
    '01 00 01': '011',
    '01 00 10': '000',
    '01 00 11': '001',

    '01 01 00': '011',
    '01 01 01': '010',
    '01 01 10': '001',
    '01 01 11': '000',

    '01 10 00': '110',
    '01 10 01': '111',
    '01 10 10': '100',
    '01 10 11': '101',

    '01 11 00': '111',
    '01 11 01': '110',
    '01 11 10': '101',
    '01 11 11': '100',
	#---------------------
    '10 00 00': '100',
    '10 00 01': '101',
    '10 00 10': '110',
    '10 00 11': '111',
                 
    '10 01 00': '101',
    '10 01 01': '100',
    '10 01 10': '111',
    '10 01 11': '110',

    '10 10 00': '000',
    '10 10 01': '001',
    '10 10 10': '010',
    '10 10 11': '011',

    '10 11 00': '001',
    '10 11 01': '000',
    '10 11 10': '011',
    '10 11 11': '010',
	#---------------------
    '11 00 00': '110',
    '11 00 01': '111',
    '11 00 10': '100',
    '11 00 11': '101',

    '11 01 00': '111',
    '11 01 01': '110',
    '11 01 10': '101',
    '11 01 11': '100',

    '11 10 00': '010',
    '11 10 01': '011',
    '11 10 10': '000',
    '11 10 11': '001',

    '11 11 00': '011',
    '11 11 01': '010',
    '11 11 10': '001',
    '11 11 11': '000',
    }

TriAND = {
    '0 0 0': '0',
    '0 0 1': '0',
    '0 1 0': '0',
    '0 1 1': '0',
    '1 0 0': '0',
    '1 0 1': '0',
    '1 1 0': '0',
    '1 1 1': '1',
    }


THRESHOLD_TWO = {
    '0 0 0': '0',
    '0 0 1': '0',
    '0 1 0': '0',
    '0 1 1': '1',
    '1 0 0': '0',
    '1 0 1': '1',
    '1 1 0': '1',
    '1 1 1': '1',
    }

AND_TRIPLET = {
    '0 0 0': '000',
    '0 0 1': '000',
    '0 1 0': '000',
    '0 1 1': '100',
    '1 0 0': '000',
    '1 0 1': '010',
    '1 1 0': '001',
    '1 1 1': '111',
    }

REDUNDANCY_TWO_ONE_IRRELEVANT = {
    'A A 0': 'A',
    'A A 1': 'A',
    'B B 0': 'B',
    'B B 1': 'B',
    }

# {1}{23} = 1 bit
REDUNDANCY_1_OR_23 = {
    '0 0 0': '0',
    '1 0 1': '1',
    '1 1 0': '1',
    '0 1 1': '0',
    }

REDUNDANCY_TWO = {
    'A A': 'A',
    'B B': 'B',
    }

REDUNDANCY_THREE = {
    'A A A': 'A',
    'B B B': 'B',
    }

XOR = {
    '0 0': '0',
    '0 1': '1',
    '1 0': '1',
    '1 1': '0',
    }

XOR_DUPLICATE = {
    '0 0 0': '0',
    '0 1 0': '1',
    '1 0 1': '1',
    '1 1 1': '0',
    }


XORx1x2rdn = {
    '0a 0a': '0',
    '0a 1a': '1',
    '1b 0b': '1',
    '1b 1b': '0',
    }


XOR_X1 = {
    '0 0': '00',
    '0 1': '10',
    '1 0': '11',
    '1 1': '01',
    }


# XOR of the last two
XOR_ONE_IRRELEVANT = {
    '0 0 0': '0',
    '0 0 1': '1',
    '0 1 0': '1',
    '0 1 1': '0',
    '1 0 0': '0',
    '1 0 1': '1',
    '1 1 0': '1',
    '1 1 1': '0',
    }


PARITY = {
    '0 0 0': '0',
    '0 0 1': '1',
    '0 1 0': '1',
    '0 1 1': '0',
    '1 0 0': '1',
    '1 0 1': '0',
    '1 1 0': '0',
    '1 1 1': '1',
    }

# XOR first two, XOR of last two
XORab_XORcd = {
    '0 0 0 0': '00',
    '0 0 0 1': '01',
    '0 0 1 0': '01',
    '0 0 1 1': '00',
    '0 1 0 0': '10',
    '0 1 0 1': '11',
    '0 1 1 0': '11',
    '0 1 1 1': '10',
    '1 0 0 0': '10',
    '1 0 0 1': '11',
    '1 0 1 0': '11',
    '1 0 1 1': '10',
    '1 1 0 0': '00',
    '1 1 0 1': '01',
    '1 1 1 0': '01',
    '1 1 1 1': '00',
    }


# PARITY of all 3 bits, XOR of the last two bits
# It MAKES SENSE that I(X0:Y)=1 because H(X0)=1 and H(X0|Y)=0.

# synmin has an odd behavior on multi-level four.
# -- it's unclear whether it's doing the right thing (per the original multilevel)
# -- or whether it's counting the same bit twice.
# Regardless, synmin is sufficiently maimed that this issue doesnt need to be resolved.
#TABLE = tables.MULTILEVEL_FOUR

# synmin gets an unusual +1.0 for XOR_ab_bc as well--because it can only use b once.
# it's unclear whether this is a defect in the syn_min measure or is simply what they want to measure
# As such we're going to skip using XOR_ab_bc
#TABLE = tables.XORab_XORcd

MULTI_LEVEL = {
    '0 0 0': '00',
    '0 0 1': '11',
    '0 1 0': '11',
    '0 1 1': '00',
    '1 0 0': '10',
    '1 0 1': '01',
    '1 1 0': '01',
    '1 1 1': '10',
    }

PRR = PARITY_REDUN_REDUN = {
    '0ab 0ab 0ab': '0ab',
    '0aB 0aB 0aB': '0aB',
    '0Ab 0Ab 0Ab': '0Ab',
    '0AB 0AB 0AB': '0AB',

    '0ab 0ab 1ab': '1ab',
    '0aB 0aB 1aB': '1aB',
    '0Ab 0Ab 1Ab': '1Ab',
    '0AB 0AB 1AB': '1AB',

    '0ab 1ab 0ab': '1ab',
    '0aB 1aB 0aB': '1aB',
    '0Ab 1Ab 0Ab': '1Ab',
    '0AB 1AB 0AB': '1AB',

    '0ab 1ab 1ab': '0ab',
    '0aB 1aB 1aB': '0aB',
    '0Ab 1Ab 1Ab': '0Ab',
    '0AB 1AB 1AB': '0AB',

    '1ab 0ab 0ab': '1ab',
    '1aB 0aB 0aB': '1aB',
    '1Ab 0Ab 0Ab': '1Ab',
    '1AB 0AB 0AB': '1AB',

    '1ab 0ab 1ab': '0ab',
    '1aB 0aB 1aB': '0aB',
    '1Ab 0Ab 1Ab': '0Ab',
    '1AB 0AB 1AB': '0AB',

    '1ab 1ab 0ab': '0ab',
    '1aB 1aB 0aB': '0aB',
    '1Ab 1Ab 0Ab': '0Ab',
    '1AB 1AB 0AB': '0AB',

    '1ab 1ab 1ab': '1ab',
    '1aB 1aB 1aB': '1aB',
    '1Ab 1Ab 1Ab': '1Ab',
    '1AB 1AB 1AB': '1AB',
    }


QUAD = SYN_REDUN_INDEP_TWO = {
    '0ra 0rb': '0_r_ab',
    '0ra 0rB': '0_r_aB',
    '0rA 0rb': '0_r_Ab',
    '0rA 0rB': '0_r_AB',

    '0Ra 0Rb': '0_R_ab',
    '0Ra 0RB': '0_R_aB',
    '0RA 0Rb': '0_R_Ab',
    '0RA 0RB': '0_R_AB',
#########################
    '0ra 1rb': '1_r_ab',
    '0ra 1rB': '1_r_aB',
    '0rA 1rb': '1_r_Ab',
    '0rA 1rB': '1_r_AB',

    '0Ra 1Rb': '1_R_ab',
    '0Ra 1RB': '1_R_aB',
    '0RA 1Rb': '1_R_Ab',
    '0RA 1RB': '1_R_AB',
#########################
    '1ra 0rb': '1_r_ab',
    '1ra 0rB': '1_r_aB',
    '1rA 0rb': '1_r_Ab',
    '1rA 0rB': '1_r_AB',

    '1Ra 0Rb': '1_R_ab',
    '1Ra 0RB': '1_R_aB',
    '1RA 0Rb': '1_R_Ab',
    '1RA 0RB': '1_R_AB',
#########################
    '1ra 1rb': '0_r_ab',
    '1ra 1rB': '0_r_aB',
    '1rA 1rb': '0_r_Ab',
    '1rA 1rB': '0_r_AB',

    '1Ra 1Rb': '0_R_ab',
    '1Ra 1RB': '0_R_aB',
    '1RA 1Rb': '0_R_Ab',
    '1RA 1RB': '0_R_AB',
#########################
    }

SYN_EQUALS_REDUN_TWO = {
    '0A 0A': '0A',
    '0B 0B': '0B',

    '0A 1A': '1A',
    '0B 1B': '1B',

    '1A 0A': '1A',
    '1B 0B': '1B',

    '1A 1A': '0A',
    '1B 1B': '0B',
    }

SYN_EQUALS_REDUN_THREE = {
    '0A 0A 0A': '0A',
    '0B 0B 0B': '0B',

    '0A 0A 1A': '1A',
    '0B 0B 1B': '1B',

    '0A 1A 0A': '1A',
    '0B 1B 0B': '1B',

    '0A 1A 1A': '0A',
    '0B 1B 1B': '0B',

    '1A 0A 0A': '1A',
    '1B 0B 0B': '1B',

    '1A 0A 1A': '0A',
    '1B 0B 1B': '0B',

    '1A 1A 0A': '0A',
    '1B 1B 0B': '0B',

    '1A 1A 1A': '1A',
    '1B 1B 1B': '1B',
    }


SYN_EQUALS_REDUN_FOUR = {
    '0A 0A 0A 0A': '0A',
    '0A 0A 0A 1A': '1A',
    '0A 0A 1A 0A': '1A',
    '0A 0A 1A 1A': '0A',
    '0A 1A 0A 0A': '1A',
    '0A 1A 0A 1A': '0A',
    '0A 1A 1A 0A': '0A',
    '0A 1A 1A 1A': '1A',
    '1A 0A 0A 0A': '1A',
    '1A 0A 0A 1A': '0A',
    '1A 0A 1A 0A': '0A',
    '1A 0A 1A 1A': '1A',
    '1A 1A 0A 0A': '0A',
    '1A 1A 0A 1A': '1A',
    '1A 1A 1A 0A': '1A',
    '1A 1A 1A 1A': '0A',
    '0B 0B 0B 0B': '0B',
    '0B 0B 0B 1B': '1B',
    '0B 0B 1B 0B': '1B',
    '0B 0B 1B 1B': '0B',
    '0B 1B 0B 0B': '1B',
    '0B 1B 0B 1B': '0B',
    '0B 1B 1B 0B': '0B',
    '0B 1B 1B 1B': '1B',
    '1B 0B 0B 0B': '1B',
    '1B 0B 0B 1B': '0B',
    '1B 0B 1B 0B': '0B',
    '1B 0B 1B 1B': '1B',
    '1B 1B 0B 0B': '0B',
    '1B 1B 0B 1B': '1B',
    '1B 1B 1B 0B': '1B',
    '1B 1B 1B 1B': '0B',
    }


UNQ = INDEPENDENCE_TWO = {
    'a b': 'ab',
    'a B': 'aB',
    'A b': 'Ab',
    'A B': 'AB',
    }

INDEPENDENCE_TWO_ab = {
    '0 0': '00',
    '0 1': '01',
    '1 0': '10',
    '1 1': '11',
    'A B': 'AB'
    }


INDEPENDENCE_THREE = {
    '0 0 0': '000',
    '0 0 1': '001',
    '0 1 0': '010',
    '0 1 1': '011',
    '1 0 0': '100',
    '1 0 1': '101',
    '1 1 0': '110',
    '1 1 1': '111',
    }

# XOR of all four bits, XOR of the last two bits
MULTILEVEL_FOUR = {
    '0 0 0 0': '00',
    '0 0 0 1': '11',
    '0 0 1 0': '11',
    '0 0 1 1': '00',
    '0 1 0 0': '10',
    '0 1 0 1': '01',
    '0 1 1 0': '01',
    '0 1 1 1': '10',
    '1 0 0 0': '10',
    '1 0 0 1': '01',
    '1 0 1 0': '01',
    '1 0 1 1': '10',
    '1 1 0 0': '00',
    '1 1 0 1': '11',
    '1 1 1 0': '11',
    '1 1 1 1': '00',
    }

HOLISM_AB_or_C = {
    '0 0 0': '0',
    '0 0 1': '1',
    '0 1 0': '0',
    '0 1 1': '1',
    '1 0 0': '0',
    '1 0 1': '1',
    '1 1 0': '1',
    '1 1 1': '1',
}

HOLISM_AB_xor_C = {
    '0 0 0': '0',
    '0 0 1': '1',
    '0 1 0': '0',
    '0 1 1': '1',
    '1 0 0': '0',
    '1 0 1': '1',
    '1 1 0': '1',
    '1 1 1': '0',
}


#SUITE_N2 = [ SNAGGER, SNAGGER2, SNAGGER3, INDEPENDENCE_TWO, INDEPENDENCE_TWO_ab, XOR, REDUNDANCY_TWO, X1, X2, AND, AND_X1, AND_OR, AND_NAND, AND_XOR, AND_skew, AND_skew_notuniform ]
SUITE_N2 = [ AND_mod, X1, X2, INDEPENDENCE_TWO, INDEPENDENCE_TWO_ab, XOR, REDUNDANCY_TWO, AND, AND_X1, AND_OR, AND_NAND, AND_XOR, AND_skew ]

